PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

ID : < LETTERS > (< LETTERS > | < INTEGER > );

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUALS : "=" > |
	< DIF : "!=" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< OPEN_SQ_BRACK : "[" > |
	< CLOSE_SQ_BRACK: "]" > |
	< OPEN_CURL_BRACK : "{" > |
	< CLOSE_CURL_BRACK : "}" > |
	< LT : "<" > |
	< GT : ">" > |
	< LE : "<=" > |
	< GE : ">=" > |
	< AND : "&&" > |
	< OR : "||" > |
	< NOT : "!" > |
	< INTEGER : (["0" - "9"])+ > |
	< LETTERS : (["a" - "z"]) | (["A" - "Z"])+ > |
	< SEMI_COLON : ";" > |
	< COLON : ":" > |
	< COMMA : "," > |
	< DOT : "." > |
	< FOR : "for" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< SWTICH : "switch" > |
	< CASE : "case" > |
	< THIS : "this" > |
	< IMPORT : "import" > |
	< EXTENDS : "extends" > |
	< PUBLIC : "public" > |
	< RETURN : "return" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< STRING : "String" > |
	< INT : "int" > |
	< BOOLEAN : "boolean" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< LENGTH : "length" > |
	< NEW : "new" >
;

Start : AdditiveExpression <EOF> ;

AdditiveExpression :
	MultiplicativeExpression
	(
		(< PLUS > | < MINUS >)
		MultiplicativeExpression
	)?
;

MultiplicativeExpression :
	Factor
	(
		(< TIMES > | < DIVIDE >)
		Factor
	)?
;

Factor :
	< INTEGER > |
	< MINUS> Factor |
	< OPEN_PAREN > AdditiveExpression < CLOSE_PAREN >
;

ImportDeclaration :
    < IMPORT > ID ( < DOT > ID )* < SEMI_COLON >
;
