PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS = JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES=false;

SKIP : " " | "\t" | "\r" | "\n" | < "//" (~["\n"])* > | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUALS : "=" > |
	< DIF : "!=" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< OPEN_SQ_BRACK : "[" > |
	< CLOSE_SQ_BRACK: "]" > |
	< OPEN_CURL_BRACK : "{" > |
	< CLOSE_CURL_BRACK : "}" > |
	< LT : "<" > |
	< GT : ">" > |
	< LE : "<=" > |
	< GE : ">=" > |
	< AND : "&&" > |
	< OR : "||" > |
	< NOT : "!" > |
	< INTEGER : (["0" - "9"])+ > |
	< SEMI_COLON : ";" > |
	< COLON : ":" > |
	< COMMA : "," > |
	< DOT : "." > |
	< FOR : "for" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< SWTICH : "switch" > |
	< CASE : "case" > |
	< THIS : "this" > |
	< IMPORT : "import" > |
	< EXTENDS : "extends" > |
	< PUBLIC : "public" > |
	< RETURN : "return" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< STRING : "String" > |
	< INT : "int" > |
	< BOOLEAN : "boolean" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< LENGTH : "length" > |
	< NEW : "new" > |
	< CLASST : "class" > |
	< IDD : ( < LETTER > | < UNDERSCORE > ) ( < LETTER > | < INTEGER > | < UNDERSCORE > )* > |
    < LETTER : ( < LOWER_CASE > | < UPPER_CASE > ) > |
    < LOWER_CASE : ["a" - "z"] > |
    < UPPER_CASE : ["A" - "Z"] > |
    < UNDERSCORE : "_" >
;

Start :
    ImportDeclaration
    ClassDeclaration
    <EOF>
;

ImportDeclaration #Import :
    ( < IMPORT > < IDD > ( < DOT > < IDD > )* < SEMI_COLON > )*
;

ClassDeclaration #ClassDec :
	< CLASST > < IDD >
	(
		< EXTENDS > < IDD >
	)?
	< OPEN_CURL_BRACK >
		( VarDeclaration )*
		( MethodDeclaration )*
	< CLOSE_CURL_BRACK >
;

VarDeclaration #Var :
	Type < IDD > < SEMI_COLON >
;

MethodDeclaration #void :
    < PUBLIC >
    (
        (Type
        < IDD >
        < OPEN_PAREN >
            (
            Type < IDD > ( < COMMA > Type < IDD > )*
            )?
        < CLOSE_PAREN >
        < OPEN_CURL_BRACK >
            ( SCAN 2 VarDeclaration )*
            ( Statement )*
            < RETURN > Expression < SEMI_COLON >
        < CLOSE_CURL_BRACK >) #InstanceMethod
    |
        (< STATIC > < VOID > < MAIN >
        < OPEN_PAREN >
            < STRING > < OPEN_SQ_BRACK > < CLOSE_SQ_BRACK > < IDD >
        < CLOSE_PAREN >
        < OPEN_CURL_BRACK >
            ( SCAN 2 VarDeclaration )*
            ( Statement )*
        < CLOSE_CURL_BRACK >) #MainMethod
    )
;

Statement #void :
	( < OPEN_CURL_BRACK > ( Statement )* < CLOSE_CURL_BRACK > ) |
	(
		< IF > < OPEN_PAREN > Expression < CLOSE_PAREN >
			Statement
		< ELSE >
			Statement
	) #IfStatement |
	(
		< WHILE > < OPEN_PAREN > Expression < CLOSE_PAREN > Statement
	) #WhileStatement |
	SCAN 2 (< IDD > (( < EQUALS > Expression) | (<OPEN_SQ_BRACK> Expression <CLOSE_SQ_BRACK> < EQUALS > Expression)) < SEMI_COLON > ) #AssignmentStatement |
	Expression < SEMI_COLON >
;


Type #void :
	( < INT > ( < OPEN_SQ_BRACK > < CLOSE_SQ_BRACK > )? ) |
	< BOOLEAN > |
	< IDD >
;

Expression :
    And
;

And #void :
    LessThan
    ( < AND > #And LessThan )*
;

LessThan #void :
    AddSub
    ( < LT > #LessThan AddSub )*
;

AddSub #void :
    MultDiv
    (
    ( < PLUS > #Plus MultDiv) |
    ( < MINUS > #Minus MultDiv)
    )*
;

MultDiv #void :
    Not
    (
    ( < TIMES > #Times Not ) |
    ( < DIVIDE > #Divide Not )
    )*
;

Not #void :
    < NOT > ( Not ) |
    Terminations
;

Terminations #void :
    Terminal ( Array | DotStatement )*
;

Terminal #void :
    < INTEGER > #Int |
    < TRUE > #True |
    < FALSE > #False |
    < IDD > #Id |
    < THIS > #This |
    ( < OPEN_PAREN >
        Expression
    < CLOSE_PAREN > ) |
    New
;

New #void :
    < NEW >
    (
        ( < INT >
          Array ) #NewArray
        |
        ( < IDD >
          < OPEN_PAREN >
          < CLOSE_PAREN >
        ) #NewObject
    )
;

Array #void :
    < OPEN_SQ_BRACK >
        Expression
    < CLOSE_SQ_BRACK >
;

DotStatement #void :
    < DOT >
    ( < LENGTH > #DotLength | CallExpression )
;

CallExpression #FunctionCall :
    < IDD >
    < OPEN_PAREN >
        ( Expression ( < COMMA > Expression )* )?
    < CLOSE_PAREN >
;

// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}

// Injections for the implementation of JmmNode
// Since this is injected into Token, it affects only terminals
INJECT Token :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

		throw new RuntimeException("Cannot add child nodes to a Token.");
    }

    @Override
    public List<String> getAttributes() {
        return SpecsCollections.concat("image", super.getAttributes());
    }

    @Override
    public String get(String attribute) {
		if(attribute.equals("image")) {
			return getImage();
		}

        return super.get(attribute);
    }
}
