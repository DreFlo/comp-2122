PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS = JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES=false;

SKIP : " " | "\t" | "\r" | "\n" | < "//" (~["\n"])* > | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUALS : "=" > |
	< DIF : "!=" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< OPEN_SQ_BRACK : "[" > |
	< CLOSE_SQ_BRACK: "]" > |
	< OPEN_CURL_BRACK : "{" > |
	< CLOSE_CURL_BRACK : "}" > |
	< LT : "<" > |
	< GT : ">" > |
	< LE : "<=" > |
	< GE : ">=" > |
	< AND : "&&" > |
	< OR : "||" > |
	< NOT : "!" > |
	< INTEGER : (["0" - "9"])+ > |
	< SEMI_COLON : ";" > |
	< COLON : ":" > |
	< COMMA : "," > |
	< DOT : "." > |
	< FOR : "for" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< SWTICH : "switch" > |
	< CASE : "case" > |
	< THIS : "this" > |
	< IMPORT : "import" > |
	< EXTENDS : "extends" > |
	< PUBLIC : "public" > |
	< RETURN : "return" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< STRING : "String" > |
	< INT : "int" > |
	< BOOLEAN : "boolean" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< LENGTH : "length" > |
	< NEW : "new" > |
	< CLASST : "class" > |
	< ID : ( < LETTER > | < UNDERSCORE > ) ( < LETTER > | < INTEGER > | < UNDERSCORE > )* > |
    < LETTER : ( < LOWER_CASE > | < UPPER_CASE > ) > |
    < LOWER_CASE : ["a" - "z"] > |
    < UPPER_CASE : ["A" - "Z"] > |
    < UNDERSCORE : "_" >
;

Start :
    ( ImportDeclaration )*
    ClassDeclaration
    <EOF>
;

ImportDeclaration #Import :
    < IMPORT > (< ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier) ( Package )* < SEMI_COLON >
;

Package #Package :
    < DOT > (< ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier)
;

ClassDeclaration #ClassDeclaration :
	< CLASST > (< ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier)
	(
	    ClassInheritance
	)?
	< OPEN_CURL_BRACK >
		( VarDeclaration )*
		( MethodDeclaration )*
	< CLOSE_CURL_BRACK >
;

ClassInheritance #Inheritance :
    < EXTENDS > (< ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier )
;

VarDeclaration #VarDeclaration :
	Type  < ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier < SEMI_COLON >
;

MethodDeclaration #void :
    < PUBLIC >
    (
        (Type
        < ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier
        < OPEN_PAREN >
            Arguments
        < CLOSE_PAREN >
        < OPEN_CURL_BRACK >
            ( SCAN 2 VarDeclaration )*
            ( Statement )*
            ( (< RETURN > Expression) ({ jjtThis.put("op", "return"); }) #UnaryOp(1)) < SEMI_COLON >
        < CLOSE_CURL_BRACK >) #InstanceMethod
    |
        (< STATIC > < VOID > < MAIN >
        < OPEN_PAREN >
            MainArguments
        < CLOSE_PAREN >
        < OPEN_CURL_BRACK >
            ( SCAN 2 VarDeclaration )*
            ( Statement )*
        < CLOSE_CURL_BRACK >) #MainMethod
    )
;

Arguments #Arguments :
    ( Argument ( < COMMA > Argument )* )?
;

Argument #Argument :
    Type < ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier
;

MainArguments #Arguments :
    MainType < ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier
;

MainType #Type :
    < STRING > < OPEN_SQ_BRACK > < CLOSE_SQ_BRACK > ({ jjtThis.put("type", "stringArray"); })
;

Statement #void :
	( < OPEN_CURL_BRACK > ( Statement )* < CLOSE_CURL_BRACK > ) |
	(
		< IF > < OPEN_PAREN > Expression #IfCondition < CLOSE_PAREN >
			Statement #IfBody
		< ELSE >
			Statement #Else
	) #IfStatement |
	(
		< WHILE > < OPEN_PAREN > Expression #WhileCondition < CLOSE_PAREN > Statement #WhileBody
	) #WhileStatement |
	SCAN 2 ( (< ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier ) (( < EQUALS > Expression) | (<OPEN_SQ_BRACK> Expression #Index(2) <CLOSE_SQ_BRACK> < EQUALS > Expression)) < SEMI_COLON > ) #AssignmentStatement |
	Expression < SEMI_COLON >
;


Type #Type :
	(( (< INT > ({ jjtThis.put("type", "int"); })) ( (< OPEN_SQ_BRACK > < CLOSE_SQ_BRACK >) ({ jjtThis.put("type", "intArray"); }) )?) |
	(< BOOLEAN > ({ jjtThis.put("type", "boolean"); })) |
	(< ID > ({ jjtThis.put("type", lastConsumedToken.getImage()); })))
;

Expression #void :
    And
;

And #void :
    LessThan
    ( (< AND > LessThan) ({ jjtThis.put("op", "and"); }) #BinOp(2) )*
;

LessThan #void :
    AddSub
    ( (< LT > AddSub) ({ jjtThis.put("op", "lt"); }) #BinOp(2) )*
;

AddSub #void :
    MultDiv
    (
    ( (< PLUS > MultDiv) ({ jjtThis.put("op", "add"); }) #BinOp(2)) |
    ( (< MINUS > MultDiv) ({ jjtThis.put("op", "sub"); }) #BinOp(2))
    )*
;

MultDiv #void :
    Not
    (
    ( (< TIMES > Not) ({ jjtThis.put("op", "mult"); }) #BinOp(2) ) |
    ( (< DIVIDE > Not) ({ jjtThis.put("op", "div"); }) #BinOp(2))
    )*
;

Not #void:
    ( (< NOT > Not) ({ jjtThis.put("op", "not"); }) #UnaryOp(1)) |
    Terminations
;

Terminations #void :
    Terminal ( Array | DotStatement )*
;

Terminal #void :
    (< INTEGER > ({ jjtThis.put("value", lastConsumedToken.getImage()); jjtThis.put("type", "int"); }) #Literal ) |
    (< TRUE > ({ jjtThis.put("value", lastConsumedToken.getImage()); jjtThis.put("type", "boolean"); }) #Literal) |
    (< FALSE > ({ jjtThis.put("value", lastConsumedToken.getImage()); jjtThis.put("type", "boolean"); }) #Literal) |
    (< ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier ) |
    (< THIS > #This ) |
    ( < OPEN_PAREN >
        Expression
    < CLOSE_PAREN > ) |
    New
;

New #void :
    < NEW >
    (
        ( < INT >
          < OPEN_SQ_BRACK >
              Expression
          < CLOSE_SQ_BRACK >  ) ({ jjtThis.put("type", "intArray"); })
        |
        ( (< ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier )
          < OPEN_PAREN >
          < CLOSE_PAREN >
        ) ({ jjtThis.put("type", "object"); })
    ) #New
;

Array #Array :
    < OPEN_SQ_BRACK >
        Expression
    < CLOSE_SQ_BRACK >
;

DotStatement #void :
    < DOT >
    ( (< LENGTH > ({ jjtThis.put("op", "length"); }) #UnaryOp(1)) | CallExpression )
;

CallExpression #void :
    ((< ID > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Identifier )
    < OPEN_PAREN >
        ( Expression ( < COMMA > Expression )* )? #Arguments
    < CLOSE_PAREN >) #CallExpression(2)
;

// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
        import pt.up.fe.comp.jmm.ast.JmmNode;
        import pt.up.fe.comp.jmm.ast.AJmmNode;
        import pt.up.fe.specs.util.SpecsCollections;
        extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {
        return SpecsCollections.cast(children(), JmmNode.class);
    }
    @Override
    public void add(JmmNode child, int index) {
        if (child instanceof Node) {
            addChild(index, (Node) child);
        } else {
            throw new RuntimeException("Node " + child + " is not a Node.");
        }
    }
}