PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

ID : ( < LETTER > | < UNDERSCORE > ) ( < LETTER > | < INTEGER > | < UNDERSCORE > )*;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUALS : "=" > |
	< DIF : "!=" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< OPEN_SQ_BRACK : "[" > |
	< CLOSE_SQ_BRACK: "]" > |
	< OPEN_CURL_BRACK : "{" > |
	< CLOSE_CURL_BRACK : "}" > |
	< LT : "<" > |
	< GT : ">" > |
	< LE : "<=" > |
	< GE : ">=" > |
	< AND : "&&" > |
	< OR : "||" > |
	< NOT : "!" > |
	< INTEGER : (["0" - "9"])+ > |
	< LETTER : ( < LOWER_CASE > | < UPPER_CASE > ) > |
	< LOWER_CASE : ["a" - "z"] > |
	< UPPER_CASE : ["A" - "Z"] > |
	< UNDERSCORE : "_" > |
	< SEMI_COLON : ";" > |
	< COLON : ":" > |
	< COMMA : "," > |
	< DOT : "." > |
	< FOR : "for" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< SWTICH : "switch" > |
	< CASE : "case" > |
	< THIS : "this" > |
	< IMPORT : "import" > |
	< EXTENDS : "extends" > |
	< PUBLIC : "public" > |
	< RETURN : "return" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< STRING : "String" > |
	< INT : "int" > |
	< BOOLEAN : "boolean" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< LENGTH : "length" > |
	< NEW : "new" > |
	< CLASS : "class" >
;

Start :
    ImportDeclaration
    ClassDeclaration
    <EOF>
;

AdditiveExpression :
	MultiplicativeExpression
	(
		(< PLUS > | < MINUS >)
		MultiplicativeExpression
	)?
;

MultiplicativeExpression :
	Factor
	(
		(< TIMES > | < DIVIDE >)
	 	( Factor | Expression)
	)?
;

Factor :
	ID |
	< INTEGER > |
	< MINUS> Factor |
	< OPEN_PAREN > AdditiveExpression < CLOSE_PAREN >
;

/* Change - na gramatica o import td ta envolvido em {} aka 0 ou + vezes */
ImportDeclaration :
    ( < IMPORT > ID ( < DOT > ID )* < SEMI_COLON > )*
;

ClassDeclaration :
	< CLASS > ID
	(
		< EXTENDS > ID
	)?
	< OPEN_CURL_BRACK >
		( VarDeclaration )*
		( MethodDeclaration )*
	< CLOSE_CURL_BRACK >
;

VarDeclaration :
	Type ID < SEMI_COLON >
;

MethodDeclaration :
    < PUBLIC >
    (
        Type
        ID
        < OPEN_PAREN >
            (
            Type ID ( < COMMA > Type ID )*
            )?
        < CLOSE_PAREN >
        < OPEN_CURL_BRACK >
            ( VarDeclaration )*
            ( Statement )*
            < RETURN > Expression < SEMI_COLON >
        < CLOSE_CURL_BRACK >
    |
        < STATIC > < VOID > < MAIN >
        < OPEN_PAREN >
            < STRING > < OPEN_SQ_BRACK > < CLOSE_SQ_BRACK > ID
        < CLOSE_PAREN >
        < OPEN_CURL_BRACK >
            ( SCAN 2 Statement | VarDeclaration)*
        < CLOSE_CURL_BRACK >
    )
;

Statement :
	( < OPEN_CURL_BRACK > ( Statement )* < CLOSE_CURL_BRACK > ) |
	(
		< IF > < OPEN_PAREN > Expression < CLOSE_PAREN >
			Statement
		< ELSE >
			Statement
	) |
	(
		< WHILE > < OPEN_PAREN > Expression < CLOSE_PAREN > Statement
	) |
	(ID (( < EQUALS > Expression) | (<OPEN_SQ_BRACK> Expression <CLOSE_SQ_BRACK> < EQUALS > Expression)) < SEMI_COLON > ) |
	Expression < SEMI_COLON >;


/*	( Expression ( < EQUALS > Expression )? < SEMI_COLON > )
;*/

Type : 
	( < INT > ( < OPEN_SQ_BRACK > < CLOSE_SQ_BRACK > )? ) |
	< BOOLEAN > |
	ID
;

Expression  :
    And
;

And :
    LessThan
    ( < AND > LessThan )*
;

LessThan :
    AddSub
    ( < LT > AddSub )*
;

AddSub :
    MultDiv
    (
    ( < PLUS > MultDiv ) |
    ( < MINUS > MultDiv )
    )*
;

MultDiv :
    Not
    (
    ( < TIMES > Not ) |
    ( < DIVIDE > Not )
    )*
;

Not :
    < NOT > ( Not ) |
    Terminations
;

Terminations :
    Terminal ( Array | DotStatement )*
;

Terminal :
    < INTEGER > |
    < TRUE > |
    < FALSE > |
    ID |
    < THIS > |
    ( < OPEN_PAREN >
        Expression
    < CLOSE_PAREN > ) |
    New
;

New :
    < NEW >
    (
        ( < INT >
          < OPEN_SQ_BRACK >
            Expression
          < CLOSE_SQ_BRACK > )
        |
        ( ID
          < OPEN_PAREN >
          < CLOSE_PAREN >
        )
    )
;

Array :
    < OPEN_SQ_BRACK >
        Expression
    < CLOSE_SQ_BRACK >
;

DotStatement :
    < DOT >
    ( < LENGTH > | CallExpression )
;

CallExpression :
    ID
    < OPEN_PAREN >
        ( Expression ( < COMMA > Expression )* )?
    < CLOSE_PAREN >
;


/*
Expression : 
	AdditiveExpression | 
	MultiplicativeExpression | 
	BooleanValue | 
	( Expression ( < AND > | < LT > | < PLUS > | < MINUS > | < TIMES > | < DIVIDE > ) Expression ) ->
	( Expression < OPEN_SQ_BRACK > Expression < CLOSE_SQ_BRACK >) -> Array
	( Expression < DOT > < LENGTH > ) -> DotStatement
	( Expression < DOT > ID < OPEN_PAREN > ( Expression ( < COMMA > Expression )* )? < CLOSE_PAREN > ) -> DotStatement + CallExpression
	< INTEGER > | < TRUE > | < FALSE > | ID | < THIS > -> Terminal
	( < NEW > < INT > < OPEN_SQ_BRACK > Expression < CLOSE_SQ_BRACK > ) -> New
	( < NEW > ID < OPEN_PAREN > < CLOSE_PAREN > ) -> New
	( < NOT > Expression )  -> Not
	( < OPEN_PAREN > Expression < CLOSE_PAREN > ) -> Terminal
;
*/